【Git+GitHub入門 #01：リポジトリーの作成とコミット】
	作業エリア→ステージ→コミット


【Git+GitHub入門 #02：ステージングとリセットのSoft/Mixed/Hard】
	現在のブランチを指定のコミットまでリセット
	のリセット種類の違い
	　-soft：ステージ後まで戻す（コミット直前）
	　-mixed：ステージ前まで戻す
	　-Hard：変更作業自体を無かったことにする


【Git+GitHub入門 #03：ブランチとチェックアウト】
	・ブランチ
	　新規ブランチを作成して（ブランチ欄にmasterしかなかったのが、作成したブランチ名が追加される）
	　新規ブランチをチェックアウト（ブランチ名をダブルクリックして選択）して、変更後コミットすると
	　新規ブランチは変更後が最新で、masterブランチは変更前が最新のブランチとなる。
	　（新規とmasterの２つのブランチに平行に分かれたイメージ）
	　なので、masterをチェックアウトして変更後コミットするとmasterのみに変更が反映される

	・ブランチはHistory（コミット履歴）任意のログを右クリックメニュー「ブランチ」から切ることができる
	・チェックアウトも同様に任意のログを右クリックメニュー「チェックアウト」からすることができる
	・ブランチ分岐する前にチェックアウトして変更するとどのブランチにも属さない変更になるので、
	　
	・チェックアウト中でないブランチは右クリック削除できるが、マージしてないとエラーになるので、
	　その時は右クリック削除した時のダイアログオプションの「削除を強行」にチェックすると消せる


【Git+GitHub入門 #04：マージ・リベースとコンフリクト】
	・マージ
	　分岐したブランチの変更履歴を合流する
	　合流させたい（本流にしたい）方をチェックアウトした状態で、
	　マージしたいブランチを右クリック、またはマージボタンを押してマージしたいブランチを選択
	　そうするとマージしたいブランチの作業内容が本流に取り込まれる

	・リベース
	　違いが難しいがとりあえずは、
	　　マスターに合流させたいときはマージ
	　　マスター以外に合流させたいときはリベース？
	　と覚えとくといいらしい。
	　マージと違って、分岐のブランチ自体が1本のブランチに合体するので、
	　必要なかったブランチはリベースでくっつけるといい？

	・コンフリクト
	　マージした時に変更箇所が衝突すると警告ダイアログが出て、マージが途中で止まる
	　ステージ上のファイルのアイコンが！マークになるので、開くとソース上の該当箇所に
	　衝突の旨がわかるコメントが入っているので、下記解決する
	　　さっきの！マークのファイルを右クリックメニューから選択する
	　　・自分の変更内容で解決　・相手の変更内容で解決　・両方採用する
	　　もしくは、VScodeなどならエディタ上に解決メニューが出ていたりする


【Git+GitHub入門 #05：リモートリポジトリーの追加とプッシュ】
	・リモートリポジトリとプッシュ
	　Github上にリモートリポジトリ（デフォ名：origin）を作成して、
	　ローカルリポジトリ（デフォ名：master）のファイルに変更を加えると、
	　履歴上は[master]が上で、その下が[origin/master]になっている。
	　これはmasterの方が最新の変更で、リモート（origin）は最新ではないから。
	　なので、プッシュボタンを押すとリモートにも反映されて、一番上が[master/origin]に変わる
	  ⇒プッシュ：ローカルポジトリの変更をリモートリポジトリに反映する


【Git+GitHub入門 #06：プルとリモートリポジトリーとのコンフリクト】
	・リモートリポジトリとフェッチ
	　Github上のリモートリポジトリのファイルに（ブラウザ上から）変更を加えると、
	　そのままではローカルリポジトリに反映されない。
	　なので、フェッチボタン→プルボタンを押すと、ローカルにも反映される。
	　（プルするときは変更があったブランチをチェックアウトした状態で行う）
	  ⇒フェッチ→プル：リモートリポジトリの変更をローカルリポジトリに反映する

	・リモートリポジトリとコンフリクト
	　リモートとローカルそれぞれで変更したの同じ個所が衝突しても勿論コンフリクトが発生する。
	　ローカルからは、プッシュしようとしてできなくて、フェッチ→プルしてみて初めて分かるので、
	　別々の人が作業してたら気づきにくいやつ。


【Git+GitHub入門 #07：ブランチ運用のガイドライン Git Flow】
	・ブランチ運用ガイドライン
	　sauceturreのGitFlow機能を使えば運用ガイドに沿った手順が追える
	　リポジトリ作ってGifFlowボタンを押すと、勝手にブランチを複数切ってくれるので、下記手順で。
	　１．featureブランチ：変更を加える
	　２．developブランチ：さらに変更を加える
	　３．releaseブランチ：リリース前テストなど
	　４．masterブランチ：基本さわらない
	　ただ、上記はブランチ大杉（特にWeb開発では）。GithubFlowとしてもっと簡単にしたのがあるので次はそっち


【Git+GitHub入門 #08：プルリクエストを使ったブランチ運用 GitHub Flow】
	・プルリクエストを使ったブランチ運用 GitHub Flow
	　masterブランチにマージできるのはプロジェクトリーダのみにして、
	　他の人はその都度お願いする（＝プルリクエスト）
	・プルリクエストの作成
	　github上にmasterと自分のリポジトリがある（プッシュした）状態で、
	　githubのプルリクエストのタブボタンを押してもいいし、
	　saucetreeのメニュー⇒リポジトリ⇒プルリクエストを追加でも作れる
	　プルリクエスト自体はgithubのページから行う


【Git+GitHub入門 #09：コマンドラインで Gitを操作しよう ①】
	・コマンドラインで Gitを操作しよう ①
	　早い・・・ついていけない・・・


【Git+GitHub入門 #10：コマンドラインで Gitを操作しよう ②】
	・コマンドラインで Gitを操作しよう ②
	　トレースすらままならないのでやらない
	　（コマンド操作で覚えるのはまだ後でもいい）
