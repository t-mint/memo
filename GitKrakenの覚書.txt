
【セクション1: Gitの環境を作る】
・GitHubのアカウントを作成　←実施済のためスキップ
・GitKrakenをセットアップ　
・Visual Studio Codeをセットアップ　←実施済のためスキップ


【セクション2: Gitを体験してみよう】
・コミット作業をしてみよう
　ローカルリポジトリにマスターブランチ作成→リポジトリにファイル追加→
　GitKrakenの作業エリア（unsagedFile）にファイルが表示される→
　ステージへ移動→コミットメッセージを入れてコミット

・間違えたコミットをリセットしよう
　リポジトリのファイルを削除→
　削除したファイルを戻すには、戻したいブランチ（削除前）の上で右クリックメニューから
　「リセットマスター to this commit」からリセットの種類（soft / mixed / Hard）を選択して押下
　※リセットの種類はsauceTreeの学習の覚書参照

・ステージングの役割について
　Gitのプロセスは3階層になっている
	ワークツリー
		↓　（ステージング）
	インデックス
		↓　（コミット）
	ローカルリポジトリ

　例えば、コミットし忘れて何工程も変更してしまった時、
　まとめて１コミットとしなくても、変更回数分のログが作業エリアに残っているので、
　後追いでも1工程ごとにコミットしていくことができる。
　⇒つまり、開発中はあまりコミットを意識しなくても後追いコミットできる。
　　とはいえ、こまめにコミットするに越したことはない
　　そして、コミットメッセージは適切なコメントを入れる（意味のないコメントは入れない）
　　コードが動作不良の状態ではコミットしないようにする。（残す意味がない）

・コミットとリセットの各種テクニック
　複数行まとめて変更した時、そのままではその複数行の変更で1コミットだが、
　下記操作で1行分の変更ずつコミットすることができる。
　　作業エリア（アンステージ）上に表示された変更ファイルをクリックすると、
　　ブランチビューが表示されていたエリアが、対象ファイルのDiffビューに切り替わる。
　　行頭マイナスが変更前（削除行）、行頭プラスが変更後（追加行）なので、
　　コミットしたい変更後の行頭（プラスかマイナス）をクリックすると、
　　その行の変更分だけがステージに移動する。
　　その行以外の変更はアンステージに留まるためコミットを分離できる。



・タグを利用しよう

・GitKrakenのファイル操作機能について


【セクション3: ブランチ】
・ブランチを利用しよう

・ブランチをマージしよう

・リベースで履歴をまとめよう

・チェリーピックで特定のコミットを取り込もう


【セクション4: Git Flow】
・Git Flow①：ブランチ運用のガイドライン

・Git Flowの基本 ②

・GitKrakenによる、Git Flow ①

・GitKrakenによる、Git Flow ②


【セクション5: GitHubを利用したリモートリポジトリー】
・GitHubの無償化について

・GitHubでリポジトリーを作る

・GitKrakenにリモートリポジトリーを設定する

・プッシュ - リモートリポジトリーへの変更の反映

・クローン - リモートリポジトリーのコピーをローカルに構築

・プル - リモートリポジトリーの変更を取り込む

・プルリクエスト - 変更箇所のマージを依頼する

・GitHub Flow - Git Flowよりもシンプルなブランチ運用ルール

・複数のリモートリポジトリーを設定しよう


【セクション6: その他の Gitの知識】
・サブモジュール - 他の Gitリポジトリーを、自分のリポジトリーに取り込む

・コンフリクト（変更の衝突）を解消しよう


【セクション7: GitHubを使いこなそう】
・リモートリポジトリーの初期化処理

・GitHubでのファイル操作

・Issues - バグや課題を管理する

・イシューのラベルとマイルストーンを管理しよう

・Markdown記法を学ぼう

・Projects - Kanban方式のプロジェクト管理機能

・プロジェクトとイシューを連携しよう

・Automated Kanbanで、カードの管理を自動化しよう

・プルリクエストに連携したプロジェクトと、バグを管理するプロジェクトを利用しよう

・Wiki - 共有可能なオンラインドキュメント

・Gist - 公開できる、プログラミングメモ

・GitHubの公開リポジトリーを検索しよう


【セクション8: コマンドラインで Gitを使おう】
・Git/Git Bashをインストールしよう

・git commit - Gitにコミットしよう

・git revert - コミットを取り消そう

・git reset - リセットしよう

・git tag - タグを設定しよう

・git rm / mv - ファイル操作をしよう

・gitignore - 除外ファイルを設定しよう

・git branch - ブランチを作成しよう

・git stash - スタッシュを利用して一時退避しよう

・git merge - マージしよう

・git diff - コンフリクト（衝突）が発生したときの対処をしよう

・git remote - リモートリポジトリーを利用しよう

・git push - プッシュしよう

・git clone - リモートリポジトリーからクローンを作ろう

・GitHubを SSH接続で利用しよう

・git fetch - プルをする前に、リモートリポジトリーの様子を取り込もう

